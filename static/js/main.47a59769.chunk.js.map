{"version":3,"sources":["components/forecast.js","components/current.js","redux/actions.js","components/navigation.js","components/search.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","data","mode","props","forecastlist","daily","map","obj","index","day","Date","time","getUTCDay","icon","replace","toUpperCase","react_default","a","createElement","key","className","title","react_skycons_default","summary","width","height","style","maxWidth","color","autoplay","Math","round","temperatureMax","F","currently","timezone","apparentTemperature","lib_default","format","ticking","humidity","precipProbability","hourly","fetch_BEGIN","type","fetch_SUCCESS","location","payload","fetch_ERROR","dispatch","toggleMode","unit","actions","handleToggle","e","target","id","data-toggle","onClick","name","Search","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetchWeather","handleChange","setState","input","value","handleSubmit","preventDefault","prev","current","handleGeolocator","navigator","geolocation","getCurrentPosition","position","concat","coords","latitude","longitude","onSubmit","onChange","placeholder","required","Component","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","undefined","abrupt","axios","get","then","response","status","Promise","reject","results","formatted_address","lat","geometry","lon","lng","catch","err","stop","_x","apply","arguments","App","navigation","search","isFetching","role","isError","isLoaded","components_current","forecast","Boolean","window","hostname","match","initialState","store","createStore","length","action","assign","applyMiddleware","thunk","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47a59769.chunk.js","sourcesContent":["import React from 'react';\r\nimport Skycons from 'react-skycons'\r\nimport {connect} from 'react-redux';\r\n\r\nconst Forecast = (props) => {\r\n    const convert = (F) => {\r\n        return Math.round((F -32) * 5/9)\r\n    }\r\n\r\n    \r\n    const forecastlist = props.data.daily.data.map((obj, index) => {\r\n        if(index < 7) {\r\n            let day = new Date(obj.time * 1000).getUTCDay()\r\n            let week = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\r\n            let icon = obj.icon.replace(/-/g, \"_\").toUpperCase()\r\n            \r\n            return (\r\n                <div key={index} className=\"col-lg-1\">\r\n                    <section>\r\n                        <time title={new Date(obj.time * 1000)}>{week[day]}</time>\r\n                        <Skycons title={obj.summary} width=\"128\" height=\"128\"style={{width: '100%', height: 'auto', maxWidth: '150px'}} color='black' icon={icon} autoplay={true} />\r\n                        {props.mode === \"F\" ? Math.round(obj.temperatureMax) + \" °F\": convert(obj.temperatureMax) + \" °C\"}\r\n                    </section>\r\n                </div>\r\n            ) \r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"forecast card border my-3\">\r\n            <div className=\"card-header\"><h4>7 Day Forecast</h4></div>\r\n                <div className=\"card-body text-secondary\">\r\n                    <div className=\"row seven-cols\">\r\n                    {forecastlist}\r\n                    </div>\r\n                {props.data.daily.summary}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.data, \r\n    mode: state.mode,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Forecast)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Skycons from 'react-skycons'\r\nimport Clock from 'react-live-clock';\r\n\r\nconst Current = (props) => {\r\n    const convert = (F) => {\r\n        return Math.round((F - 32) * 5 / 9)\r\n    }\r\n\r\n    let icon = props.data.currently.icon.replace(/-/g, \"_\").toUpperCase()\r\n\r\n    return (\r\n        <div className=\"current card border my-3\">\r\n            <div className=\"card-header\">\r\n                <h4>Current Forecast</h4>\r\n            </div>\r\n            <div className=\"card-body text-secondary\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">{props.data.timezone}</li>\r\n                            <li className=\"list-group-item\">{props.mode === \"F\"\r\n                                    ?  Math.round(props.data.currently.apparentTemperature) + \" °F\"\r\n                                    : convert(props.data.currently.apparentTemperature) + \" °C\"}</li>\r\n                            <li className=\"list-group-item\">{props.data.currently.summary}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"current-weather\">\r\n                        <Clock format={'h:mm:ss A'} ticking={true} timezone={props.data.timezone} />\r\n                        <Skycons\r\n                            width='128'\r\n                            height='128'\r\n                            style={{\r\n                            width: '128px',\r\n                            height: '128px'\r\n                        }}\r\n                            color='black'\r\n                            icon={icon}\r\n                            autoplay={true}/>\r\n                            </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">Humidity: {Math.round(props.data.currently.humidity * 100) + \"%\"}</li>\r\n                            <li className=\"list-group-item\">Precipitation: {Math.round(props.data.currently.precipProbability * 100) + \"%\"}</li>\r\n                            <li className=\"list-group-item\">Wind: {props.data.currently.humidity + \" mph\"}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div>{props.data.hourly.summary}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.data, \r\n    mode: state.mode,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Current)","import axios from 'axios';\r\n\r\nexport const toggleMode = (unit) => ({\r\n    type: \"TOGGLE_MODE\",\r\n    mode: unit\r\n})\r\n\r\nexport const fetchWeather = (location) => {\r\n    return async (dispatch) => {\r\n        // signal that a fetch request is about to begin\r\n        dispatch(fetch_BEGIN())\r\n\r\n        let current = undefined;\r\n\r\n        // first get coordinates of location\r\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=AIzaSyCBQcamdtpHeWv1PleVkC-a-UzJY5ZtLAI`)\r\n            .then((response) => {\r\n                \r\n                // if no coordinates found, reject promise\r\n                if (response.data.status !== \"OK\") {\r\n                    return Promise.reject();\r\n                }\r\n\r\n                current = response.data.results[0].formatted_address\r\n                const lat = response.data.results[0].geometry.location.lat\r\n                const lon = response.data.results[0].geometry.location.lng\r\n\r\n                // then get weather data using coordinates\r\n                return axios.get(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/9eca4702b41c21c7f307e9fbfe659fc8/${lat},${lon}`)\r\n            }).then((response) => {\r\n                // fetch request was a success, so pass the data to reducer\r\n                dispatch(fetch_SUCCESS(response.data, current));\r\n            }).catch((err) => {\r\n                // fetch request ended in an error\r\n                dispatch(fetch_ERROR());\r\n            })\r\n    }\r\n}\r\n\r\nconst fetch_BEGIN = () => ({\r\n    type: \"FETCH_BEGIN\"\r\n})\r\n\r\nconst fetch_SUCCESS = (data, location) => ({\r\n    type: \"FETCH_SUCCESS\",\r\n    payload: data,\r\n    location: location\r\n})\r\n\r\nconst fetch_ERROR = () => ({\r\n    type: \"FETCH_ERROR\",\r\n})","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../redux/actions'\r\n\r\nconst Navigation = (props) => {\r\n    const handleToggle = (e) => {\r\n        props.toggleMode(e.target.id)\r\n    }\r\n\r\n    return(\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n            <div className=\"navbar-brand\">\r\n                <div className=\"navbar-item\">\r\n                Weather\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"navbar-end\">\r\n                <div className=\"navbar-item\">\r\n                    <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                    <label id=\"F\" onClick={handleToggle} className=\"btn btn-primary active\">\r\n                        <input type=\"radio\" name=\"options\" id=\"option1\" />°F\r\n                    </label>\r\n                    <label id=\"C\" onClick={handleToggle} className=\"btn btn-primary\">\r\n                        <input type=\"radio\" name=\"options\" id=\"option2\" />°C\r\n                    </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n       </nav>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    toggleMode: (unit) => dispatch(actions.toggleMode(unit))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Navigation)\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../redux/actions'\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            input: \"\",\r\n            prev: \"\",\r\n            current: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.props.fetchWeather(`Los Angeles, CA, USA`)\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({input: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(this.state.input !== this.state.prev) {\r\n            this.props.fetchWeather(this.state.input)\r\n            this.setState({current: false, prev: this.state.input})\r\n        }\r\n    }\r\n\r\n    handleGeolocator = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                if(!this.state.current) {\r\n                    this.props.fetchWeather(`${position.coords.latitude}, ${position.coords.longitude}`)\r\n                    this.setState({current: true, input: \"\"})\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-container\">\r\n                <form className=\"my-3 w-100\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            className=\"form-control  border-primary\"\r\n                            onChange={this.handleChange}\r\n                            value={this.state.input}\r\n                            placeholder=\"Enter a location\"\r\n                            required />\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div>\r\n                    <button title=\"Current location\" className=\"btn btn-success ml-3\" type=\"text\" onClick={this.handleGeolocator}><i className=\"fas fa-location-arrow\"></i></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchWeather: (location) => dispatch(actions.fetchWeather(location))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Search)\r\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Forecast from './components/forecast'\nimport Current from './components/current'\nimport Navigation from './components/navigation'\nimport Search from './components/search'\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navigation/>\n\n                <div className=\"container\">\n                    <Search/>\n                    \n                    {this.props.isFetching && \n                        (<div className=\"alert alert-primary\" role=\"alert\">\n                        <i className=\"fa fa-spinner fa-spin\"></i> \n                        </div>)\n                    }\n\n                    {this.props.location && \n                        (<div className=\"alert alert-success\" role=\"alert\">\n                            {this.props.location}\n                        </div>)\n                    }\n\n                    {this.props.isError && \n                        (<div className=\"alert alert-danger\" role=\"alert\">\n                        Unable to find location. Try Again.\n                        </div>)\n                    }\n\n                    {this.props.isLoaded && (\n                        <div className=\"main-content\">\n                            <Current/>\n                            <Forecast/>\n                        </div>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    isError: state.isError, \n    isFetching: state.isFetching, \n    isLoaded: state.isLoaded,\n    location: state.location\n});\n\nexport default connect(mapStateToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    isFetching: false,\r\n    isLoaded: false,\r\n    isError: false,\r\n    data: undefined,\r\n    location: undefined,\r\n    mode: \"F\"\r\n}\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"TOGGLE_MODE\":\r\n            return Object.assign({}, state, {mode: action.mode})\r\n        case \"FETCH_BEGIN\":\r\n            return Object.assign({}, state, {isFetching: true, isLoaded: false, data: undefined, location: undefined})\r\n        case \"FETCH_SUCCESS\":\r\n            return Object.assign({}, state, {isFetching: false, isLoaded: true, data: action.payload, location: action.location, isError: false})\r\n        case \"FETCH_ERROR\":\r\n            return Object.assign({}, state, {isFetching: false, isError: true})\r\n        default:\r\n            return state;\r\n    }\r\n  };\r\n\r\n  ","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './reducer';\r\nimport thunk from 'redux-thunk';\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nstore.subscribe(() => console.log(store.getState()))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/> \n    </Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}