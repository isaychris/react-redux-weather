{"version":3,"sources":["components/forecast.js","components/current.js","components/navigation.js","redux/actions.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["Forecast","props","forecastlist","data","daily","map","obj","index","day","Date","time","getUTCDay","icon","replace","toUpperCase","react_default","a","createElement","key","className","react_skycons_default","width","height","style","maxWidth","color","autoplay","mode","temperatureMax","F","Math","round","class","summary","Current","currently","timezone","temperature","humidity","precipProbability","hourly","Navigation","data-toggle","id","onClick","handleToggle","type","name","fetch_BEGIN","fetch_SUCCESS","location","payload","fetch_ERROR","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","navigator","geolocation","getCurrentPosition","position","fetchWeather","concat","coords","latitude","longitude","handleChange","e","setState","input","target","value","handleSubmit","preventDefault","state","navigation","onSubmit","onChange","placeholder","required","isFetching","role","error","isLoaded","components_current","forecast","Component","connect","dispatch","_ref","asyncToGenerator","regenerator_default","mark","_callee","current","wrap","_context","prev","next","undefined","abrupt","axios","get","then","response","status","Promise","reject","results","formatted_address","lat","geometry","lon","lng","catch","err","stop","_x","apply","arguments","actions","Boolean","window","hostname","match","initialState","store","createStore","length","action","assign","applyMiddleware","thunk","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4159a507.chunk.js","sourcesContent":["import React from 'react';\r\nimport Skycons from 'react-skycons'\r\n\r\nconst Forecast = (props) => {\r\n    const convert = (F) => {\r\n        return Math.round((F -32) * 5/9)\r\n    }\r\n\r\n    const forecastlist = props.data.daily.data.map((obj, index) => {\r\n        if(index < 7) {\r\n            let day = new Date(obj.time * 1000).getUTCDay()\r\n            let week = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THUR\", \"FRI\", \"SAT\"]\r\n            let icon = obj.icon.replace(/-/g, \"_\").toUpperCase()\r\n            \r\n            return (\r\n                <div key={index} className=\"col-lg-1\">\r\n                    <section>\r\n                        {week[day]} <br/>\r\n                        <Skycons width=\"128\" height=\"128\"style={{width: '100%', height: 'auto', maxWidth: '150px'}} color='black' icon={icon} autoplay={true} />\r\n                        {props.mode === \"F\" ? obj.temperatureMax + \" °F\": convert(obj.temperatureMax) + \" °C\"}\r\n                    </section>\r\n                </div>\r\n            ) \r\n        }\r\n        \r\n        return null\r\n    })\r\n\r\n    return (\r\n        <div className=\"forecast card border my-3\">\r\n            <div className=\"card-header\"><h4>7 Day Forecast</h4></div>\r\n                <div class=\"card-body text-secondary\">\r\n                    <div className=\"row seven-cols\">\r\n                    {forecastlist}\r\n                    </div>\r\n                {props.data.daily.summary}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport Skycons from 'react-skycons'\r\n\r\nconst Current = (props) => {\r\n    const convert = (F) => {\r\n        return Math.round((F - 32) * 5 / 9)\r\n    }\r\n\r\n    let icon = props.data.currently.icon.replace(/-/g, \"_\").toUpperCase()\r\n\r\n    return (\r\n        <div className=\"current card border my-3\">\r\n            <div className=\"card-header\">\r\n                <h4>Current Forecast</h4>\r\n            </div>\r\n            <div className=\"card-body text-secondary\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">{props.data.timezone}</li>\r\n                            <li className=\"list-group-item\">{props.mode === \"F\"\r\n                                    ? props.data.currently.temperature + \" °F\"\r\n                                    : convert(props.data.currently.temperature) + \" °C\"}</li>\r\n                            <li className=\"list-group-item\">{props.data.currently.summary}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <Skycons\r\n                            width='128'\r\n                            height='128'\r\n                            style={{\r\n                            width: '128px',\r\n                            height: '128px'\r\n                        }}\r\n                            color='black'\r\n                            icon={icon}\r\n                            autoplay={true}/>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">Humidity: {props.data.currently.humidity + \"%\"}</li>\r\n                            <li className=\"list-group-item\">Percepitation: {props.data.currently.precipProbability + \"%\"}</li>\r\n                            <li className=\"list-group-item\">Wind: {props.data.currently.humidity + \" mph\"}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div>{props.data.hourly.summary}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Current;","import React from 'react';\r\n\r\nconst Navigation = (props) => {\r\n    return(\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n            <div className=\"navbar-brand\">\r\n                <div className=\"navbar-item\">\r\n                Weather\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"navbar-end\">\r\n                <div className=\"navbar-item\">\r\n                    <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                    <label id=\"F\" onClick={props.handleToggle} className=\"btn btn-primary active\">\r\n                        <input type=\"radio\" name=\"options\" id=\"option1\" />°F\r\n                    </label>\r\n                    <label id=\"C\" onClick={props.handleToggle} className=\"btn btn-primary\">\r\n                        <input type=\"radio\" name=\"options\" id=\"option2\" />°C\r\n                    </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n       </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation","import axios from 'axios';\r\n\r\nexport const toggle_unit = () => ({\r\n    type: \"TOGGLE_UNIT\"\r\n})\r\n\r\nexport const fetchWeather = (location) => {\r\n    return async (dispatch) => {\r\n        // signal that a fetch request is about to begin\r\n        dispatch(fetch_BEGIN())\r\n\r\n        let current = undefined;\r\n\r\n        // first get coordinates of location\r\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=AIzaSyCBQcamdtpHeWv1PleVkC-a-UzJY5ZtLAI`)\r\n            .then((response) => {\r\n                \r\n                // if no coordinates found, reject promise\r\n                if (response.data.status !== \"OK\") {\r\n                    return Promise.reject();\r\n                }\r\n\r\n                current = response.data.results[0].formatted_address\r\n                const lat = response.data.results[0].geometry.location.lat\r\n                const lon = response.data.results[0].geometry.location.lng\r\n\r\n                // then get weather data using coordinates\r\n                return axios.get(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/9eca4702b41c21c7f307e9fbfe659fc8/${lat},${lon}`)\r\n            }).then((response) => {\r\n                // fetch request was a success, so pass the data to reducer\r\n                dispatch(fetch_SUCCESS(response.data, current));\r\n            }).catch((err) => {\r\n                // fetch request ended in an error\r\n                dispatch(fetch_ERROR());\r\n            })\r\n    }\r\n}\r\n\r\nconst fetch_BEGIN = () => ({\r\n    type: \"FETCH_BEGIN\"\r\n})\r\n\r\nconst fetch_SUCCESS = (data, location) => ({\r\n    type: \"FETCH_SUCCESS\",\r\n    payload: data,\r\n    location: location\r\n})\r\n\r\nconst fetch_ERROR = () => ({\r\n    type: \"FETCH_ERROR\",\r\n})\r\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Forecast from './components/forecast'\nimport Current from './components/current'\nimport Navigation from './components/navigation'\nimport * as actions from './redux/actions'\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            input: \"\",\n            mode: \"F\"\n        }\n    }\n\n    componentDidMount = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.props.fetchWeather(`${position.coords.latitude}, ${position.coords.longitude}`)\n            });\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({input: e.target.value})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.fetchWeather(this.state.input)\n    }\n\n    handleToggle = (e) => {\n        this.setState({mode: e.target.id})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Navigation handleToggle={this.handleToggle}/>\n                <div className=\"container\">\n                    <form className=\"my-3\" onSubmit={this.handleSubmit}>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control  border-primary\"\n                                onChange={this.handleChange}\n                                value={this.state.input}\n                                placeholder=\"Enter a location\"\n                                required />\n                            <div className=\"input-group-append\">\n                                <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n                            </div>\n                        </div>\n                    </form>\n\n                    {this.props.isFetching && \n                        (<div className=\"alert alert-primary\" role=\"alert\">\n                            Fetching data ...\n                        </div>)\n                    }\n\n                    {this.props.location && \n                        (<div className=\"alert alert-success\" role=\"alert\">\n                            {this.props.location}\n                        </div>)\n                    }\n\n                    <div className=\"error-message\">\n                        {this.props.error && <div className=\"alert alert-danger\" role=\"alert\">\n                            Unable to find location. Try Again.\n                            </div>}\n                    </div>\n\n                    {this.props.isLoaded && (\n                        <div>\n                            <Current\n                                data={this.props.data}\n                                location={this.props.location}\n                                mode={this.state.mode}/>\n                            <Forecast data={this.props.data} mode={this.state.mode}/>\n                        </div>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    data: state.data, \n    error: state.error, \n    isFetching: state.isFetching, \n    location: state.location, \n    isLoaded: state.isLoaded\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchWeather: (location) => dispatch(actions.fetchWeather(location))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    isFetching: false,\r\n    isLoaded: false,\r\n    data: undefined,\r\n    location: undefined,\r\n    error: false,\r\n}\r\n\r\nexport const fetchReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"FETCH_BEGIN\":\r\n            return Object.assign({}, state, {isFetching: true, isLoaded: false, data: undefined, location: undefined})\r\n        case \"FETCH_SUCCESS\":\r\n            return Object.assign({}, state, {isFetching: false, isLoaded: true, data: action.payload, location: action.location, error: false})\r\n        case \"FETCH_ERROR\":\r\n            return Object.assign({}, state, {isFetching: false, error: true})\r\n        default:\r\n            return state;\r\n    }\r\n  };\r\n\r\n  ","import { createStore, applyMiddleware } from 'redux';\r\nimport { fetchReducer } from './reducer';\r\nimport thunk from 'redux-thunk';\r\nexport const store = createStore(fetchReducer, applyMiddleware(thunk));\r\n\r\nstore.subscribe(() => console.log(store.getState()))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/> \n    </Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}